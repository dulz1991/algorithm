给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

示例 1：
输入：nums = [1,5,11,5]
输出：true
解释：数组可以分割成 [1, 5, 5] 和 [11] 。

示例 2：
输入：nums = [1,2,3,5]
输出：false
解释：数组不能分割成两个元素和相等的子集。
 
提示：
1 <= nums.length <= 200
1 <= nums[i] <= 100

思路：
对nums求和sum 如果存在2个子集，那么一定存在某个子集的和为sum/2 = target。
所以我们要做的就是，求出nums中，是否存在和为target。
最容易想到的方法是dfs，不过容易超时，改用dp。
分析一下dp用法：
dp长度为target-1，从最大下标处开始dp，如果dp[i-e](某个目标值-当前数字)，结果为true，那么dp[i]必定为true
所以转移方程为：dp[i] = dp[i] || dp[i-e]

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function(nums) {
    if(nums.length==1) return false; //一位长度 直接返回false
    
    let sum = 0;
    nums.forEach(e => sum += e ); //求和
    if(sum % 2 == 1) return false; //如果和为奇数 肯定不存在
    let target = sum / 2;
    //if(Math.max(...nums) > target) return false; //如果nums中最大值超过了target 直接返回false
    
    let dp = [true]; //定义dp数组 dp[0]=true 长度为target+1

    nums.forEach(e => {
        //从最大下标处开始dp，如果dp[i-e](某个目标值-当前数字)，结果为true，那么dp[i]必定为true
        for(let i=target; i>=e; i--){ 
            dp[i] = dp[i] || dp[i-e] || false;
        }
    });

    return dp[target];
};
