你正在安装一个广告牌，并希望它高度最大。这块广告牌将有两个钢制支架，两边各一个。每个钢支架的高度必须相等。
你有一堆可以焊接在一起的钢筋 rods。举个例子，如果钢筋的长度为 1、2 和 3，则可以将它们焊接在一起形成长度为 6 的支架。
返回广告牌的最大可能安装高度。如果没法安装广告牌，请返回 0。

示例 1：
输入：[1,2,3,6]
输出：6
解释：我们有两个不相交的子集 {1,2,3} 和 {6}，它们具有相同的和 sum = 6。

示例 2：
输入：[1,2,3,4,5,6]
输出：10
解释：我们有两个不相交的子集 {2,3,5} 和 {4,6}，它们具有相同的和 sum = 10。

示例 3：
输入：[1,2]
输出：0
解释：没法安装广告牌，所以返回 0。
 
提示：
0 <= rods.length <= 20
1 <= rods[i] <= 1000
钢筋的长度总和最多为 5000

思路：
对于rods里的每个元素 都有3种操作，加、减或者丢弃，记录每个元素的操作，将结果放入map，记录和为sum时的成功长度
如 对元素1 ，结果为{0:0,1:1,-1:0}
对于丢弃的 不处理 所以还是0
最终和为0的长度，就是最大的广告牌高度

/**
 * @param {number[]} rods
 * @return {number}
 */
var tallestBillboard = function(rods) {
    let dp = {0:0}; //初始0
    rods.forEach(e=>{
        let dpCopy = Object.assign({}, dp) //拷贝dp 因为在循环的时候 修改dp会对数据造成干扰
        for(let key in dp){
            let k = parseInt(key);
            dp[k+e] = Math.max(dp[k+e] || 0, dpCopy[k] + e);
            dp[k-e] = Math.max(dp[k-e] || 0, dpCopy[k]); //如果是减，长度不做变化，否则高度可能出现负数
        }
    })
    /*
    for(let i=0; i<rods.length; i++){
        let e = rods[i];
        let dpCopy = Object.assign({}, dp) //拷贝dp 因为在循环的时候 修改dp会对数据造成干扰
        for(let key in dp){
            let k = parseInt(key);
            dp[k+e] = Math.max( (dp[k+e] || 0) , (dpCopy[k] + e)  );
            dp[k-e] = Math.max( (dp[k-e] || 0) , (dpCopy[k]  )  );
        }
    }
    */
    return dp[0];
};
