给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。
一开始你在下标 0 处。每一步，你最多可以往前跳 k 步，但你不能跳出数组的边界。也就是说，你可以从下标 i 跳到 [i + 1， min(n - 1, i + k)] 包含 两个端点的任意位置。
你的目标是到达数组最后一个位置（下标为 n - 1 ），你的 得分 为经过的所有数字之和。
请你返回你能得到的 最大得分 。

示例 1：
输入：nums = [1,-1,-2,4,-7,3], k = 2
输出：7
解释：你可以选择子序列 [1,-1,4,3] （上面加粗的数字），和为 7 。

示例 2：
输入：nums = [10,-5,-2,4,0,3], k = 3
输出：17
解释：你可以选择子序列 [10,4,3] （上面加粗数字），和为 17 。

示例 3：
输入：nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
输出：0

提示：
 1 <= nums.length, k <= 105
-104 <= nums[i] <= 104

思路：
* 将数组按k分段（第一个元素除外），每一段数组，max（自己+上一段最大值，自己+上一个数）
* 转移方程：dp[i] = Math.max( nums[i] + Math.max(dp[i-1] ~ dp[i-k]),  nums[i]+dp[i-1])
* 单纯的动态规划超时 增加滑动窗口 窗口大小为k，每次加入到窗口，计算最大值

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 * 将数组按k分段（第一个元素除外），每一段数组，max（自己+上一段最大值，自己+上一个数）
 * 转移方程：dp[i] = Math.max( nums[i] + Math.max(dp[i-1] ~ dp[i-k]),  nums[i]+dp[i-1])
 * 单纯的动态规划超时 增加滑动窗口 窗口大小为k，每次加入到窗口，计算最大值
 */
var maxResult = function(nums, k) {
    let dp = [nums[0]]; 
    let len = nums.length-1;
    
    let win = new SlideWindow(k); //实例化滑动窗口
    win.add(0, dp[0]); //添加第一个数进去
    
    for(let i=1; i<=len; i++){
        //超时
        //dp[i] = Math.max( nums[i] + getMaxScore(dp, i, k),  nums[i] + dp[i-1])

        //滑动窗口方式
        dp[i] = Math.max( nums[i] + win.max(),  nums[i] + dp[i-1])
        win.add(i, dp[i]); //添加第i个数进去
    }
    
    return dp[len]
};

//取 [i-k, i-1] 之间的最大值 存在超时
function getMaxScore(dp, i, k){
    let start = Math.max(i-k, 0);
    let end = i-1;
    let max = dp[start];
    for(let j=start+1; j<=end; j++){
        max = Math.max(max, dp[j]);
    }
    return max;
}

function SlideWindow(k){
    let limit = k;
    let arr = []; //队列 先进先出
    let max = null;

    this.add = function(index, value){
        if(max==null){
            max = value;
        }
        
        //是否即将超过窗口大小
        if(arr.length==limit){
            let data = arr.pop();
            arr.unshift(value); //添加最新的数据
            
            if(value >=max){
                max = value;   
            } else if( max == data){ //如果弹出了最大值 或者加入了最大值

                //console.log(max)
				/*
                max = arr[0];
                for(let j=1; j<limit; j++){ //重新计算最大值
                    max = Math.max(max, arr[j]);
                }
                */

                max = Math.max(...arr)
            }
            
            
            
        } else {
            arr.unshift(value); //添加最新的数据
            if(max < value){
                max = value;
            }
        }
    }

    this.max = function(){
        return max;
    }
}
