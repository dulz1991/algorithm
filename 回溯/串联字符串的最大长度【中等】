给定一个字符串数组 arr，字符串 s 是将 arr 某一子序列字符串连接所得的字符串，如果 s 中的每一个字符都只出现过一次，那么它就是一个可行解。
请返回所有可行解 s 中最长长度。

示例 1：
输入：arr = ["un","iq","ue"]
输出：4
解释：所有可能的串联组合是 "","un","iq","ue","uniq" 和 "ique"，最大长度为 4。

示例 2：
输入：arr = ["cha","r","act","ers"]
输出：6
解释：可能的解答有 "chaers" 和 "acters"。

示例 3：
输入：arr = ["abcdefghijklmnopqrstuvwxyz"]
输出：26
 

提示：
1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] 中只含有小写英文字母

思路：
对于每一个元素 都有串联或者不串联，基于此进行回溯
每次串联的时候 需要判断串联后是否有重复字符，若重复 则跳过此次计算

/**
 * @param {string[]} arr
 * @return {number}
 * 对于每一个元素 都有串联或者不串联，基于此进行回溯
 */
var maxLength = function(arr) {
    let map = {max:0}
    each(map, arr, 0, "")
    return map.max;
};

/**
map：存储最大值,对象传递 方便计算
arr：数组
i：第i个元素
str：累加字符串
 */
function each(map, arr, i, str){
    if(i==arr.length) return ////是否达到最后一个

 if(i==arr.length-1){ //如果到了最后一个
        if(str.length + arr[i].length <= map.max){ //即便加上了 也不到当前最大值，可直接结束
            return
        }
    }
    
    let curStr = arr[i]+str;
    if(hasSameChar(curStr)){  //累加后是否有重复 若重复 跳过此次计算
        each(map, arr, i+1, str) 
        return
    } 
   
    //否则进行下一轮计算
    map.max = Math.max(map.max, curStr.length);
    each(map, arr, i+1, curStr)
    each(map, arr, i+1, str)
    
}

//是否有相同字符
function hasSameChar(str){
    let map = {};
    for(let i=0; i<str.length; i++){
        if(map[str[i]]){
            return true;
        }
        map[str[i]] = 1;
    }
    return false
}
