在一个 2 x 3 的板上（board）有 5 块砖瓦，用数字 1~5 来表示, 以及一块空缺用 0 来表示.
一次移动定义为选择 0 与一个相邻的数字（上下左右）进行交换.
最终当板 board 的结果是 [[1,2,3],[4,5,0]] 谜板被解开。
给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回 -1 。

示例：
输入：board = [[1,2,3],[4,0,5]]
输出：1
解释：交换 0 和 5 ，1 步完成

输入：board = [[1,2,3],[5,4,0]]
输出：-1
解释：没有办法完成谜板

输入：board = [[4,1,2],[5,0,3]]
输出：5
解释：
最少完成谜板的最少移动次数是 5 ，
一种移动路径:
尚未移动: [[4,1,2],[5,0,3]]
移动 1 次: [[4,1,2],[0,5,3]]
移动 2 次: [[0,1,2],[4,5,3]]
移动 3 次: [[1,0,2],[4,5,3]]
移动 4 次: [[1,2,0],[4,5,3]]
移动 5 次: [[1,2,3],[4,5,0]]

输入：board = [[3,2,4],[1,5,0]]
输出：14

提示：
board 是一个如上所述的 2 x 3 的数组.
board[i][j] 是一个 [0, 1, 2, 3, 4, 5] 的排列.

思路：
获取0所在位置
将0进行上下左右四个方向进行移动，交换0与目的元素，判断是否符合顺序
每个方向的移动记录移动过的位置，以免重复


/**
 * @param {number[][]} board
 * @return {number}
 */
var slidingPuzzle = function(board) {
    let map = {
        result: 999999
    };
    let pos = getZeroPos(board)
    let i = pos[0]
    let j = pos[1]
    let visited = ''
    let curStr = board.join(',')
    if(curStr == '1,2,3,4,5,0'){
        return 0
    }

    each(i, j, visited, map, curStr,0)

	if(map.result==999999){
	return -1
	}
	
    return map.result
};

function each(i, j, visited, map, curStr, times){

if(times>20){
return
}
    if(map.result == 1){ //如果是1 肯定是最小次数了
        return
    }
    if(curStr == '1,2,3,4,5,0'){
        map.result = Math.min(map.result, times)
        return
    }
    
    
    if(visited.indexOf(curStr+';')>=0){
        //是否访问过
        return
    } else {
        //记录访问
        visited += curStr + ';' 
    }

    let str;
     
    str = move(curStr, i, j, 'top') //上移
    if(str){
        each(i-1, j, visited, map, str, times+1)
    }
    
    str = move(curStr, i, j, 'bottom') //下移
    if(str){
        each(i+1, j, visited, map, str, times+1)
    }

    str = move(curStr, i, j, 'left') //左移
    if(str){
        each(i, j-1, visited, map, str, times+1)
    }

    str = move(curStr, i, j, 'right') //右移
    if(str){
        each(i, j+1, visited, map, str, times+1)
    }
}

function move(curStr, i, j, type){
    let board = toBoard(curStr) //字符串转二维数组
    let temp = board[i][j] //0的位置

    if(type == 'top'){
        let line = board[i-1]
        if(!line) return
        board[i][j] = line[j] //0的位置变成上一个位置
        line[j] = 0 //上一个位置变成0
    } else if(type == 'bottom'){
        let line = board[i+1]
        if(!line) return
        board[i][j] = line[j] 
        line[j] = 0
    } else if(type == 'left'){
        let line = board[i]
        if(!line[j-1]) return
        board[i][j] = line[j-1] 
        line[j-1] = 0
    } else {
        let line = board[i]
        if(!line[j+1]) return
        board[i][j] = line[j+1] 
        line[j+1] = 0
    }
	
	let res = board.join(',')
	if(res.indexOf(',,')>=0){
		debugger
	}
    return res
}

function toBoard(str){
    let s1 = str.slice(0,5)
    let s2 = str.slice(6,11)
    return [s1.split(','),s2.split(',')]
}

//是否完成
function isTrue(board){
    let str = board.join(',');
    return str == '1,2,3,4,5,0';
}

function getZeroPos(board){
    for(let i=0; i<board.length; i++){
        let line = board[i];
        for(let j=0; j<line.length; j++){
            if(line[j] == 0){
                return [i,j]
            }
        }
    }
    return []
}
