Trie（发音类似 "try"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。

请你实现 Trie 类：

Trie() 初始化前缀树对象。
void insert(String word) 向前缀树中插入字符串 word 。
boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。
boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。

示例：
输入
["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
输出
[null, null, true, false, true, null, true]

解释
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // 返回 True
trie.search("app");     // 返回 False
trie.startsWith("app"); // 返回 True
trie.insert("app");
trie.search("app");     // 返回 True


提示：
1 <= word.length, prefix.length <= 2000
word 和 prefix 仅由小写英文字母组成
insert、search 和 startsWith 调用次数 总计 不超过 3 * 104 次


思路：
构建前缀树节点数据结构：
function Node(){
    this.map = {};
    this.end = false;
}
map存储上个字母可达的所有下级字母
end标记是否到此单词可构成插入的完整单词

插入的时候，判断每个节点中的map是否存在此字母，若存在，变量指向下一个节点；若不存在，创建新节点，变量指向新创建的节点
搜索的时候，逐个节点遍历，如果节点不存在，或者最后一个节点不是end，返回false，否则返回true
前缀匹配的时候，过程与搜索一样，区别在于不需要判断最后一个节点的end属性








/**
 * Initialize your data structure here.
 */
var Trie = function() {
    this.root = new Node();
};

function Node(){
    this.map = {};
    //this.val = val;
    this.end = false;
}

/**
 * Inserts a word into the trie. 
 * @param {string} word
 * @return {void}
 */
Trie.prototype.insert = function(word) {
    let node = this.root;
    for(let i=0; i<word.length; i++){
        if(node.map[word[i]]){ //是否已存在此单词
            node = node.map[word[i]]
        } else { //不存在 创建节点
            let newNode = new Node();
            node.map[word[i]] = newNode;
            node = newNode
        }
    }
    node.end = true; //将最后一个单词标记为true
};

/**
 * Returns if the word is in the trie. 
 * @param {string} word
 * @return {boolean}
 */
Trie.prototype.search = function(word) {
    let node = this.root;
    for(let i=0; i<word.length; i++){
        if(node.map[word[i]]){
            node = node.map[word[i]]
        } else {
            return false
        }
    }
    return node.end
};

/**
 * Returns if there is any word in the trie that starts with the given prefix. 
 * @param {string} prefix
 * @return {boolean}
 */
Trie.prototype.startsWith = function(prefix) {
    let node = this.root;
    for(let i=0; i<prefix.length; i++){
        if(node.map[prefix[i]]){
            node = node.map[prefix[i]]
        } else {
            return false
        }
    }
    return true
};

/**
 * Your Trie object will be instantiated and called as such:
 * var obj = new Trie()
 * obj.insert(word)
 * var param_2 = obj.search(word)
 * var param_3 = obj.startsWith(prefix)
 */
