给你一个整数数组 target 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：

令 x 为你数组里所有元素的和
选择满足 0 <= i < target.size 的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。
你可以重复该过程任意次
如果能从 A 开始构造出目标数组 target ，请你返回 True ，否则返回 False 。

示例 1：
输入：target = [9,3,5]
输出：true
解释：从 [1, 1, 1] 开始
[1, 1, 1], 和为 3 ，选择下标 1
[1, 3, 1], 和为 5， 选择下标 2
[1, 3, 5], 和为 9， 选择下标 0
[9, 3, 5] 完成

示例 2：
输入：target = [1,1,1,2]
输出：false
解释：不可能从 [1,1,1,1] 出发构造目标数组。

示例 3：
输入：target = [8,5]
输出：true 

提示：
N == target.length
1 <= target.length <= 5 * 10^4
1 <= target[i] <= 10^9


思路：
从数学角度思考，数组中最大的元素，一定是其他元素（除了最大元素外）的和 加上 某个值而得到，那么这个最大值的上一任值就是 sum(其他元素) - 最大元素 = x。
按照这个逻辑递推下去，如果在数组变成全是1之前，发现某个值<1,则说明不可能
如:[9,3,5] => [1,3,5] => [1,3,1] => [1,1,1] 可以构造
如：[1,1,1,2] => [1,1,1,-1] 不可以构造

/**
 * @param {number[]} target
 * @return {boolean}
 */
var isPossible = function(target) {
	while(true){
		let result = reduce(target);
		if(result == 1){
			return true;
		}
		if(result == -1){
			return false;
		}
	}
};

function reduce(target){
	let sum = 0;
	let maxIndex, max=-1;
	debugger
    //求最大值下标 以及 数组求和
	for(let i=0; i<target.length; i++){
		if(target[i] >= max){
			maxIndex = i;
			max = target[i];
		}
		sum += target[i];
	}
	if(sum==target.length){ //是否累加和 与 target长度相等 如果相等 说明是可以构造成功的
		return true;
	}
	sum -= max; //否则 计算除max之外的和
	
	//如果max比sum小 直接返回false
	if(max<=sum || sum==0){
		return -1
	}
	
	//计算max与sum的倍数
	let times = Math.floor(max/sum) - 1;
	max -= sum*times;
	
	if(max==1){
		target[maxIndex] = 1; //
	} else {
		target[maxIndex] = max-sum; //替换max这个位置值为max-sum
	}
	
	if(target[maxIndex]<1){
		return -1;
	} else {
		return 2;
	}
}
