给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

示例 1：
输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

示例 2：
输入：nums = [0,1]
输出：[[0,1],[1,0]]

示例 3：
输入：nums = [1]
输出：[[1]]
 
提示：
1 <= nums.length <= 6
-10 <= nums[i] <= 10
nums 中的所有整数 互不相同

思路：
循环nums，每个元素都可能作为开头，各自执行回溯。
回溯中，判断已加入到临时数组中的元素是否出现在nums中，找到未出现的，一次加入到临时数组中，进行下一次回溯。
如果临时数组中元素满了（长度和nums一样），则加入到res数组中，等待返回。
注：由于临时数组的地址引用问题，每次加入新数据，需要拷贝数组。

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
    let res  = []
    for(let i=0; i<nums.length; i++){
        each(res, nums, [nums[i]]);
    }
    return res;
};

function each(res, nums, item){
    if(item.length == nums.length) {
        res.push(item);
        return;
    }
    
    //找到nums未加入到item的元素，遍历投放
    for(let j=0; j<nums.length; j++){
        if(!item.includes(nums[j])){ //未加入到item
            let temp = item.slice(); //克隆数组
            temp.push(nums[j]);
            each(res, nums, temp)
        }
    }

}
