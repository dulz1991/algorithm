  
搜索旋转数组。给定一个排序后的数组，包含n个整数，但这个数组已被旋转过很多次了，次数不详。
请编写代码找出数组中的某个元素，假设数组元素原先是按升序排列的。若有多个相同元素，返回索引值最小的一个。

示例1:
 输入: arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 5
 输出: 8（元素5在该数组中的索引）

示例2:
 输入：arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 11
 输出：-1 （没有找到）

提示:
arr 长度范围在[1, 1000000]之间

方法一:
最容易想到的方式，循环遍历查找
/**
 * @param {number[]} arr
 * @param {number} target
 * @return {number}
 */
var search = function(arr, target) {
  for(let i=0; i<arr.length; i++){
        if(arr[i] == target){
            return i;
        }
    }
    return -1;
}

方式二：
循环遍历查找的效率不高，数组循环后，target的位置可能靠前，也可能靠后，双指针从两边同时遍历，提高效率
/**
 * @param {number[]} arr
 * @param {number} target
 * @return {number}
 */
var search = function(arr, target) {
    //方式2 双指针
    let left = 0, right = arr.length-1;
    while(left <= right){
        if(arr[left] == target){ //如果左指针相等，返回left对应的索引
            return left;
        }

        if(arr[right] == target){ //如果右指针相等
            //相等 说明还有下一个 继续递减遍历
            while(arr[--right] == target){
                //right--;
            }
            return right+1
        }

        left++;
        right--;
    }
    return -1;
};
