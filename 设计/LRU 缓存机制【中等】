运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。
实现 LRUCache 类：
LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存
int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。
void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。
 
进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例：

输入
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
输出
[null, null, null, 1, null, -1, null, -1, 3, 4]

解释
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // 缓存是 {1=1}
lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}
lRUCache.get(1);    // 返回 1
lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}
lRUCache.get(2);    // 返回 -1 (未找到)
lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}
lRUCache.get(1);    // 返回 -1 (未找到)
lRUCache.get(3);    // 返回 3
lRUCache.get(4);    // 返回 4

提示：
1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
最多调用 3 * 104 次 get 和 put


思路：
map + 双向链表（包含head与tail指针，方便寻找第一个和剔除最后一个）
map存储的key为put的key，value为Node数据结构，如下：
function Node(key, val){
    this.key = key;
    this.val = val;
    this.left = null;
    this.right = null;
}
每次put的时候，判断要put的key是否已存在，如果不存在，判断是否达到容器上限，未达到，则size++， 否则先删除链表尾部数据，然后在链表头插入新元素。
如果存在，则将此元素value修改，然后移动到head指针下。
get的时候，返回数据之前，将此元素移动到head指针下。


/**
 * @param {number} capacity
 */
var LRUCache = function(capacity) {
    this.size = 0;
    this.capacity = capacity;
    this.map = {};
    
	//定义首尾节点
    this.head = new Node(-1);
    this.tail = new Node(-2);
    this.head.right = this.tail;
    this.tail.left = this.head; 
};

function Node(val){
    //this.key = key;
    this.val = val;
    this.left = null;
    this.right = null;
	this.enable = true;
}

/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function(key) {
    let node = this.map[key]; //查询key对应的节点
    if(node && node.enable){ //是否存在
        this.remove(node);  //移除此节点 
        this.addToHead(node);//然后插入到头部
        return node.val; //返回值
    }
    return -1;
};


/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
    //判断是否已经存在 已存在的 移动至头部
    //不存在的 删除尾部元素 头部插入新元素
    let node = this.map[key]; //查询key对应的节点
    if(node && node.enable){ //已存在
        node.val = value;
		this.remove(node);  //移除此节点 
		this.addToHead(node);//然后插入到头部
		return;
    } 
	if(this.size == this.capacity){ //是否达到容量
		//已达到
		this.removeTail();//移除尾部元素
	} else { 
		//未达到
		this.size++; //size++
	}
	
	if(node){
		node.enable = true;
		node.val = value;
		this.map[key] = node; //添加到map
		this.addToHead(node);//头部插入
	} else {
		let newNode = new Node(value); //创建新节点
		this.map[key] = newNode; //添加到map
		this.addToHead(newNode);//头部插入
	}
};

//头部插入元素节点
LRUCache.prototype.addToHead = function(node) {
	node.enable = true;
    //let firstNode = this.head.right;
	
	this.head.right.left = node; //首元素节点 左指针指向node
	
	//node左右指针切换
	node.left = this.head;
	node.right = this.head.right;
	
	//头节点指向noed
	this.head.right = node;
}
//移除某个节点
LRUCache.prototype.remove = function(node) {
	node.enable = false;
	node.left.right = node.right;
	node.right.left = node.left;
	
}
//移除尾部元素
LRUCache.prototype.removeTail = function() {
    let tailNode = this.tail.left;
	this.remove(tailNode);
	
	
    ////delete this.map[tailNode.key]; //删除map里的元素
	//tailNode.enable = false;
    ////let preNode = tailNode.left;
    //tailNode.left.right = this.tail;
	//this.tail.left = tailNode.left;
    
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */
