运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。
实现 LRUCache 类：
LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存
int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。
void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。
 
进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例：

输入
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
输出
[null, null, null, 1, null, -1, null, -1, 3, 4]

解释
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // 缓存是 {1=1}
lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}
lRUCache.get(1);    // 返回 1
lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}
lRUCache.get(2);    // 返回 -1 (未找到)
lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}
lRUCache.get(1);    // 返回 -1 (未找到)
lRUCache.get(3);    // 返回 3
lRUCache.get(4);    // 返回 4

提示：
1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
最多调用 3 * 104 次 get 和 put


思路：
map + 双向链表（包含head与tail指针，方便寻找第一个和剔除最后一个）
map存储的key为put的key，value为Node数据结构，如下：
function Node(key, val){
    this.key = key;
    this.val = val;
    this.left = null;
    this.right = null;
}
每次put的时候，判断要put的key是否已存在，如果不存在，判断是否达到容器上限，未达到，则size++， 否则先删除链表尾部数据，然后在链表头插入新元素。
如果存在，则将此元素value修改，然后移动到head指针下。
get的时候，返回数据之前，将此元素移动到head指针下。



/**
 * @param {number} capacity
 */
var LRUCache = function(capacity) {
    this.size = 0;
    this.capacity = capacity;
    this.map = {};
    
    this.head = new Node(null,-1);
    this.tail = new Node(null, -2);
    this.head.right = this.tail;
    this.tail.left = this.head; 
	
	
};


function Node(key, val){
    this.key = key;
    this.val = val;
    this.left = null;
    this.right = null;
}

/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function(key) {
   // console.log(Object.keys(this.map).length)
    let node = this.map[key]; //查询key对应的节点
    if(node){ //是否存在
        //this.moveToHead(node); //节点移至head下一个
        
        this.remove(node);

        let newNode = new Node(node.key, node.val);
        this.map[key] = newNode; //添加到map
        this.addToHead(newNode);//头部插入
        //this.moveToHead(node);
        
        return node.val;
    }
    return -1;
};

//将活跃的key节点移动至head指针的下一个
LRUCache.prototype.moveToHead2 = function(node){
    let pre = node.left; //node节点的前一个
    if(pre.val==-1){ //如果前一个已经是head 结束操作
        return
    } 
//debugger
    let firstNode = this.head.right; //head指针的下一个元素 
	
	let togeter = firstNode.right.key == node.key
    
	let nodeL = node.left;
	let nodeR = node.right;
	
    this.head.right = node;
    node.left = this.head;

    node.right = firstNode;
    firstNode.left = node;

    if(togeter){ //node与firstNode是否相邻
        firstNode.right = nodeR;
        nodeR.left = firstNode;
    } else {
        nodeL.right = nodeR;
    }

}
LRUCache.prototype.moveToHead = function(node){
    let pre = node.left; //node节点的前一个
    
    if(pre.val==-1){ //如果前一个已经是head 结束操作
        return
    } 

    //否则进行移动
	let firstNode = this.head.right; //head指针的下一个元素 
	if(firstNode.right.key == node.key){ //node与firstNode是否相邻
		let next = node.right; //node下一个节点 需要变动左指针 指向firstNode
		//let firstNode = this.head.right; //首元素节点 需要调节左右指针
		//firstNode节点的左指针指向node，有指针指向node的下一个
		firstNode.left = node;
		firstNode.right = next;
		
		//node左指针指向head，右指针指向firstNode节点
		node.left = this.head;
		node.right = firstNode;

		this.head.right = node;
		next.left = firstNode;
	} else { //不相邻
		//node周边节点调整
		let nodePre = node.left; //node的前一个节点
		nodePre.left = node.right;
		node.right.left = nodePre;
		
		//firstNode周边调整
		node.left = this.head;
		node.right = firstNode;
		
		firstNode.left = node;
		
		this.head.right = node;
	}
	
    
}

//头部插入元素节点
LRUCache.prototype.addToHead = function(node) {
    let firstNode = this.head.right;
	
    this.head.right = node;
    firstNode.left = node;
	
	node.left = this.head;
	node.right = firstNode;
}

/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
    if(this.size < this.capacity){ //是否达到容量
		let node = this.map[key];
		if(node){  //已存在
			node.val = value;
			this.remove(node);

            node = new Node(key, value);
            this.map[key] = node; //添加到map    
            this.addToHead(node);
			//this.moveToHead(node);
			//this.size++;
			return
		}
		
        //未达到 补充到头部
        node = new Node(key, value);
        this.map[key] = node; //添加到map
        this.addToHead(node);
		this.size++;
        return;
    }
	
    //已经达到容量 
    //判断是否已经存在 已存在的 移动至头部
    //不存在的 删除尾部元素 头部插入新元素
    let node = this.map[key]; //查询key对应的节点
    if(node){
        //已存在的 移动至头部
		node.val = value;

        this.remove(node);

        let newNode = new Node(key, value);
        this.map[key] = newNode; //添加到map
        this.addToHead(newNode);//头部插入
        //this.moveToHead(node);
    } else {
        //不存在的 删除尾部元素 头部插入新元素
        this.removeTail();//移除尾部元素

        

        let newNode = new Node(key, value);
        this.map[key] = newNode; //添加到map
        this.addToHead(newNode);//头部插入
    }

};

LRUCache.prototype.remove = function(node) {
    let nodeL = node.left;
    let nodeR = node.right;
    nodeL.right = nodeR;
    nodeR.left = nodeL;
    node = null;
}
//移除尾部元素
LRUCache.prototype.removeTail = function() {
    let tailNode = this.tail.left;
    if(tailNode.val==-1){
        return
    }

    if(!this.map[tailNode.key]){
        debugger
    }
    delete this.map[tailNode.key]; //删除map里的元素

    let preNode = tailNode.left;
    this.tail.left = preNode;
    preNode.right = this.tail;
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * var obj = new LRUCache(capacity)
 * var param_1 = obj.get(key)
 * obj.put(key,value)
 */
